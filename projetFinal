#ISN-mikaEtChristian
#Projet final d'ISN

import pygame   #Permet d'utiliser pygame
import random   #Permet d'utiliser la fonction hasard

#Fonction qui sera executée quand on lance le programme et qui dessinera le menu principal
def main():
    running = True  #On utilise cela car on execute le programme seulement lorsque running = True donc pour arreter le programme, il suffit de mettre un running = False
    pygame.init()
    #On définit des couleurs
    blue = (0,0,255)
    red = (255,0,0)
    green = (0,255,0)
    pink = (255,144,210)
    purple = (128,0,128)
    yellow = (255,255,0)
    white = (255,255,255)
    orange = (230,126,34)
    lightGrey = (200,200,200)
    grey = (128,128,128)
    black = (0, 0, 0)
    #On crée la fenetre pygame
    fenetre = pygame.display.set_mode((1024, 768))
    couleurs1 = [1,2,3,4,5,6,7,8]
    couleurs2 = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8]


    while running:  #Pendant que running = True, on execute le programme

        playButton1 = pygame.draw.rect(fenetre, white, (341,250,342,128))   #Dessine le bouton "Mode Normale"
        playButton2 = pygame.draw.rect(fenetre, white, (341,426,342,128))   #Dessine le bouton "Mode Avancé"
        font = pygame.font.SysFont ("impact", 48)
        fontInstructions = pygame.font.SysFont ("arial", 25)
        fontTitre = pygame.font.SysFont("impact", 85)
        textEasy = font.render("Mode Normal", True, black)
        fenetre.blit(textEasy, (385, 282))
        textHard = font.render("Mode Avancé", True, black)
        fenetre.blit(textHard, (385, 458))

        #MASTERMIND
        textTitre = fontTitre.render("M",True, red)
        fenetre.blit(textTitre, (289, 100))
        textTitre = fontTitre.render("A",True, orange)
        fenetre.blit(textTitre, (350, 100))
        textTitre = fontTitre.render("S",True, yellow)
        fenetre.blit(textTitre, (395, 100))
        textTitre = fontTitre.render("T",True, green)
        fenetre.blit(textTitre, (439, 100))
        textTitre = fontTitre.render("E",True, blue)
        fenetre.blit(textTitre, (478, 100))
        textTitre = fontTitre.render("R",True, purple)
        fenetre.blit(textTitre, (513, 100))
        textTitre = fontTitre.render("M",True, pink)
        fenetre.blit(textTitre, (559, 100))
        textTitre = fontTitre.render("I",True, white)
        fenetre.blit(textTitre, (620, 100))
        textTitre = fontTitre.render("N",True, lightGrey)
        fenetre.blit(textTitre, (644, 100))
        textTitre = fontTitre.render("D",True, grey)
        fenetre.blit(textTitre, (690, 100))
        textNormal = font.render("Mode Normal", True, white)
        fenetre.blit(textNormal, (25, 100))
        textAvance = font.render("Mode Avancé", True, white)
        fenetre.blit(textAvance, (739, 100))

        #Instructions du mode Normal
        textNormal1 = fontInstructions.render("Dans le mode normal", True, white)
        fenetre.blit(textNormal1, (25, 150))
        textNormal1 = fontInstructions.render("il faut trouver le code", True, white)
        fenetre.blit(textNormal1, (25, 175))
        textNormal1 = fontInstructions.render("secret en plaçant des", True, white)
        fenetre.blit(textNormal1, (25, 200))
        textNormal1 = fontInstructions.render("pions par combinaison", True, white)
        fenetre.blit(textNormal1, (25, 225))
        textNormal1 = fontInstructions.render("de quatre.", True, white)
        fenetre.blit(textNormal1, (25, 250))
        textNormal1 = fontInstructions.render("En cliquant sur les pions", True, white)
        fenetre.blit(textNormal1, (25, 275))
        textNormal1 = fontInstructions.render("en bas de l'écran, vous", True, white)
        fenetre.blit(textNormal1, (25, 300))
        textNormal1 = fontInstructions.render("les placerez dans la", True, white)
        fenetre.blit(textNormal1, (25, 325))
        textNormal1 = fontInstructions.render("prochaine position", True, white)
        fenetre.blit(textNormal1, (25, 350))
        textNormal1 = fontInstructions.render("disponible.", True, white)
        fenetre.blit(textNormal1, (25, 375))
        textNormal1 = fontInstructions.render("Quand une rangée est", True, white)
        fenetre.blit(textNormal1, (25, 400))
        textNormal1 = fontInstructions.render("complétée, des pions", True, white)
        fenetre.blit(textNormal1, (25, 425))
        textNormal1 = fontInstructions.render("apparaitront à la droite", True, white)
        fenetre.blit(textNormal1, (25, 450))
        textNormal1 = fontInstructions.render("de la rangée.", True, white)
        fenetre.blit(textNormal1, (25, 475))
        textNormal1 = fontInstructions.render("Un pion blanc signifie", True, white)
        fenetre.blit(textNormal1, (25, 500))
        textNormal1 = fontInstructions.render("que un des pions placés", True, white)
        fenetre.blit(textNormal1, (25, 525))
        textNormal1 = fontInstructions.render("est de la bonne couleure", True, white)
        fenetre.blit(textNormal1, (25, 550))
        textNormal1 = fontInstructions.render("mais dans la mauvaise", True, white)
        fenetre.blit(textNormal1, (25, 575))
        textNormal1 = fontInstructions.render("position.", True, white)
        fenetre.blit(textNormal1, (25, 600))
        textNormal1 = fontInstructions.render("Tandis qu'un pion rouge", True, white)
        fenetre.blit(textNormal1, (25, 625))
        textNormal1 = fontInstructions.render("signifie qu'un pion est", True, white)
        fenetre.blit(textNormal1, (25, 650))
        textNormal1 = fontInstructions.render("de la bonne couleure et", True, white)
        fenetre.blit(textNormal1, (25, 675))
        textNormal1 = fontInstructions.render("dans la bonne position.", True, white)
        fenetre.blit(textNormal1, (25, 700))

        #Instructions du mode avancé
        textAvance1 = fontInstructions.render("Dans le mode avancé le", True, white)
        fenetre.blit(textAvance1, (739, 150))
        textAvance1 = fontInstructions.render("principe est le même que", True, white)
        fenetre.blit(textAvance1, (739, 175))
        textAvance1 = fontInstructions.render("dans le mode normal", True, white)
        fenetre.blit(textAvance1, (739, 200))
        textAvance1 = fontInstructions.render("sauf qu'il est possible", True, white)
        fenetre.blit(textAvance1, (739, 225))
        textAvance1 = fontInstructions.render("qu'il y ait plusieurs fois la", True, white)
        fenetre.blit(textAvance1, (739, 250))
        textAvance1 = fontInstructions.render("même couleure dans la", True, white)
        fenetre.blit(textAvance1, (739, 275))
        textAvance1 = fontInstructions.render("combinaison à trouver.", True, white)
        fenetre.blit(textAvance1, (739, 300))





        pygame.display.flip()
        pressed1, pressed2, pressed3 = pygame.mouse.get_pressed()   #Permet de déterminer si les boutons de la souris sont cliqués
        pos = pygame.mouse.get_pos()    #Permet de déterminer la position de la souris
        if pressed1:                    #Si on fait un clic gauche
            if playButton1.collidepoint(pos): #Et que le curseur est sur le bouton "Mode Normal"
                mode(couleurs1)               #Alors on exécute la fonction mode avec couleurs = couleurs1
                return
            elif playButton2.collidepoint(pos): #Par ailleurs si le curseur est sur le bouton "Mode Avancé"
                mode(couleurs2)                 #Alors on exécute la fonction mode avec couleurs = couleurs2
                return

        for event in pygame.event.get():
            if event.type == pygame.QUIT:   #Si on a un évènement dans pygame qui est de type QUIT (c'est à dire cliquer sur la croix pour quitter la fenetre)
                running = False             #Alors le programme s'arrette
                pygame.quit()               #Et on quitte la fenetre
                return




###################################################################################################################################################################################################################################################

def mode(couleurs):


    codeSecret = random.sample(couleurs, 4)  #Prend quatre chiffres au hasard de la liste couleurs

    pygame.init()
    fenetre = pygame.display.set_mode((1024, 768))
    fond = pygame.image.load("Mastermind2.png").convert()
    fenetre.blit(fond, (0,0))
    running = True
    pos1 = True
    pos2 = False
    pos3 = False
    pos4 = False
    pressed1 = False
    blue = (0,0,255)
    red = (255,0,0)
    green = (0,255,0)
    pink = (255,144,210)
    purple = (128,0,128)
    yellow = (255,255,0)
    white = (255,255,255)
    orange = (230,126,34)
    black = (0,0,0)
    grey = (128,128,128)
    ligne=682
    font = pygame.font.SysFont ("impact", 36)
    text = font.render("C'est gagné!", True, yellow)
    text6 = font.render("C'est perdu!", True, yellow)
    nombreEssais=0



    maListe = []    #On crée une liste vierge

    #On dessine la grille du mastermind
    pygame.draw.rect(fenetre, black, (256,0,512,768))
    pygame.draw.rect(fenetre, grey, (297,51,5,660))
    pygame.draw.rect(fenetre, grey, (297,51,389,5))
    pygame.draw.rect(fenetre, grey, (297,706,430,5))
    pygame.draw.rect(fenetre, grey, (681,51,5,660))
    pygame.draw.rect(fenetre, grey, (297,111,430,5))
    pygame.draw.rect(fenetre, grey, (727,111,5,600))

    y=172
    for loop in range(9):
        pygame.draw.rect(fenetre, grey, (297,y,430,1))
        y=y+60

    #On dessine les points d'interrogation
    font2 = pygame.font.SysFont("calibribold", 50)
    text2 = font2.render("?", True, grey)
    text3 = font2.render("?", True, grey)
    text4 = font2.render("?", True, grey)
    text5 = font2.render("?", True, grey)
    fenetre.blit(text2, (335, 68))
    fenetre.blit(text3, (432, 68))
    fenetre.blit(text4, (529, 68))
    fenetre.blit(text5, (626, 68))


    #On dessine les pions en bas de la fenetre
    redCircle = pygame.draw.circle(fenetre, red, (288,743), 20, 0)
    orangeCircle = pygame.draw.circle(fenetre, orange, (352,743), 20, 0)
    yellowCircle = pygame.draw.circle(fenetre, yellow, (416,743), 20, 0)
    greenCircle = pygame.draw.circle(fenetre, green, (480,743), 20, 0)
    blueCircle = pygame.draw.circle(fenetre, blue, (544,743), 20, 0)
    purpleCircle = pygame.draw.circle(fenetre, purple, (608,743), 20, 0)
    pinkCircle = pygame.draw.circle(fenetre, pink, (672,743), 20, 0)
    whiteCircle = pygame.draw.circle(fenetre, white, (736,743), 20, 0)


    #On dessine les cercles blancs dans la grille
    height = 682
    width = 345
    width2 = 696
    height2 = 692
    for loop in range(11):
        for loop in range(4):
            x = width
            pygame.draw.circle(fenetre, white, (x,height), 19, 1)
            width = width+97
        height = height-60
        width = width-388

    #On dessine les petits cercles blancs à la droite de la grille
    for loop in range(10):
        pygame.draw.circle(fenetre, white, (width2,height2), 4, 1)
        pygame.draw.circle(fenetre, white, (width2+20,height2), 4, 1)
        pygame.draw.circle(fenetre, white, (width2,height2-20), 4, 1)
        pygame.draw.circle(fenetre, white, (width2+20,height2-20), 4, 1)
        height2 = height2-60


    pygame.display.flip()   #Permet de dessiner toutes les modifications apportées

    while running:

        pos = pygame.mouse.get_pos()    #On trouve la position du curseur
        wasPressed = pressed1           #Cela veut dire que wasPressed = False car nous avons dits que pressed1 = False
        pressed1, pressed2, pressed3 = pygame.mouse.get_pressed()   #Vérifie si on clique sur les boutons de la souris (si un bouton est cliqué alors en fonction du bouton, pressed1, pressed2 ou pressed3 devient True



        if pressed1 and not wasPressed: #Si on fait un clique gauche et que wasPressed est False (wasPressed deviendra True une fois que l'on fait un clic gauche)
            if pos1:                    #Et si pos1 est True
                if redCircle.collidepoint(pos): #Et si le curseur est sur le cercle rouge
                    pygame.draw.circle(fenetre, red, (345,ligne), 20, 0)    #Alors dessiner un cercle rouge à la première colonne (x = 345)
                    pygame.display.flip()
                    pos1 = False    #Puisque pos1 devient False et que pos2 devient True, une fois que la première colonne contient un pion, on bougera à la deuxième colonne
                    pos2 = True
                    maListe.append(1)   #Si on a cliqué sur le cercle rouge, alors on place un 1 à la première position dans maListe
                elif orangeCircle.collidepoint(pos):    #Si par ailleurs le curseur est sur le cercle orange quand on clique
                    pygame.draw.circle(fenetre, orange, (345,ligne), 20, 0) #Alors on dessine un cercle orange
                    pygame.display.flip()
                    pos1 = False
                    pos2 = True
                    maListe.append(2)   #Et placer un 2 à la première position de maListe
                elif yellowCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, yellow, (345,ligne), 20, 0)
                    pygame.display.flip()
                    pos1 = False
                    pos2 = True
                    maListe.append(3)
                elif greenCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, green, (345,ligne), 20, 0)
                    pygame.display.flip()
                    pos1 = False
                    pos2 = True
                    maListe.append(4)
                elif blueCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, blue, (345,ligne), 20, 0)
                    pygame.display.flip()
                    pos1 = False
                    pos2 = True
                    maListe.append(5)
                elif purpleCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, purple, (345,ligne), 20, 0)
                    pygame.display.flip()
                    pos1 = False
                    pos2 = True
                    maListe.append(6)
                elif pinkCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, pink, (345,ligne), 20, 0)
                    pygame.display.flip()
                    pos1 = False
                    pos2 = True
                    maListe.append(7)
                elif whiteCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, white, (345,ligne), 20, 0)
                    pygame.display.flip()
                    pos1 = False
                    pos2 = True
                    maListe.append(8)

            elif pos2:  #Si pos2 est vrai (pos2 devient vrai une fois que pos1 soit completé)
                if redCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, red, (442,ligne), 20, 0)    #On a maintenant x = 442 car on place maintenant le pion dans la deuxième colonne
                    pygame.display.flip()
                    pos2 = False    #Puisque pos2 devient False et que pos3 devient True, une fois que la deuxième colonne contient un pion, on bougera à la troisième colonne
                    pos3 = True
                    maListe.append(1)
                elif orangeCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, orange, (442,ligne), 20, 0)
                    pygame.display.flip()
                    pos2 = False
                    pos3 = True
                    maListe.append(2)
                elif yellowCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, yellow, (442,ligne), 20, 0)
                    pygame.display.flip()
                    pos2 = False
                    pos3 = True
                    maListe.append(3)
                elif greenCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, green, (442,ligne), 20, 0)
                    pygame.display.flip()
                    pos2 = False
                    pos3 = True
                    maListe.append(4)
                elif blueCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, blue, (442,ligne), 20, 0)
                    pygame.display.flip()
                    pos2 = False
                    pos3 = True
                    maListe.append(5)
                elif purpleCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, purple, (442,ligne), 20, 0)
                    pygame.display.flip()
                    pos2 = False
                    pos3 = True
                    maListe.append(6)
                elif pinkCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, pink, (442,ligne), 20, 0)
                    pygame.display.flip()
                    pos2 = False
                    pos3 = True
                    maListe.append(7)
                elif whiteCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, white, (442,ligne), 20, 0)
                    pygame.display.flip()
                    pos2 = False
                    pos3 = True
                    maListe.append(8)

            elif pos3:  #Si pos3 est vrai (pos3 devient vrai une fois que pos2 soit completé)
                if redCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, red, (539,ligne), 20, 0)    #On a maintenant x = 539 car on place maintenant le pion dans la troisième colonne
                    pygame.display.flip()
                    pos3 = False    #Puisque pos3 devient False et que pos4 devient True, une fois que la troisième colonne contient un pion, on bougera à la quatrième colonne
                    pos4 = True
                    maListe.append(1)
                elif orangeCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, orange, (539,ligne), 20, 0)
                    pygame.display.flip()
                    pos3 = False
                    pos4 = True
                    maListe.append(2)
                elif yellowCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, yellow, (539,ligne), 20, 0)
                    pygame.display.flip()
                    pos3 = False
                    pos4 = True
                    maListe.append(3)
                elif greenCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, green, (539,ligne), 20, 0)
                    pygame.display.flip()
                    pos3 = False
                    pos4 = True
                    maListe.append(4)
                elif blueCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, blue, (539,ligne), 20, 0)
                    pygame.display.flip()
                    pos3 = False
                    pos4 = True
                    maListe.append(5)
                elif purpleCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, purple, (539,ligne), 20, 0)
                    pygame.display.flip()
                    pos3 = False
                    pos4 = True
                    maListe.append(6)
                elif pinkCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, pink, (539,ligne), 20, 0)
                    pygame.display.flip()
                    pos3 = False
                    pos4 = True
                    maListe.append(7)
                elif whiteCircle.collidepoint(pos):
                    pygame.draw.circle(fenetre, white, (539,ligne), 20, 0)
                    pygame.display.flip()
                    pos3 = False
                    pos4 = True
                    maListe.append(8)


            elif pos4:  #Si pos4 est vrai (pos4 devient vrai une fois que pos3 soit completé)
                if redCircle.collidepoint(pos):
                    running = couleur(fenetre, ligne, maListe, codeSecret, nombreEssais, red, red, orange, yellow, green, blue, purple, pink, white, text, text6)   #On execute la fonction color


                    pygame.display.flip()
                    pos4 = False
                    pos1 = True
                    nombreEssais=nombreEssais+1 #On rajoute 1 au nombres d'essais
                    ligne = ligne-60    #On se déplace d'une rangée vers le haut
                    maListe = []        #On revide maListe

                elif orangeCircle.collidepoint(pos):
                    running = couleur(fenetre, ligne, maListe, codeSecret, nombreEssais, orange, red, orange, yellow, green, blue, purple, pink, white, text, text6)


                    pygame.display.flip()
                    pos4 = False
                    pos1 = True
                    nombreEssais=nombreEssais+1
                    ligne = ligne-60
                    maListe = []

                elif yellowCircle.collidepoint(pos):
                    running = couleur(fenetre, ligne, maListe, codeSecret, nombreEssais, yellow, red, orange, yellow, green, blue, purple, pink, white, text, text6)


                    pygame.display.flip()
                    pos4 = False
                    pos1 = True
                    nombreEssais=nombreEssais+1
                    ligne = ligne-60
                    maListe = []

                elif greenCircle.collidepoint(pos):
                    running = couleur(fenetre, ligne, maListe, codeSecret, nombreEssais, green, red, orange, yellow, green, blue, purple, pink, white, text, text6)


                    pygame.display.flip()
                    pos4 = False
                    pos1 = True
                    nombreEssais=nombreEssais+1
                    ligne = ligne-60
                    maListe = []

                elif blueCircle.collidepoint(pos):
                    running = couleur(fenetre, ligne, maListe, codeSecret, nombreEssais, blue, red, orange, yellow, green, blue, purple, pink, white, text, text6)


                    pygame.display.flip()
                    pos4 = False
                    pos1 = True
                    nombreEssais=nombreEssais+1
                    ligne = ligne-60
                    maListe = []

                elif purpleCircle.collidepoint(pos):
                    running = couleur(fenetre, ligne, maListe, codeSecret, nombreEssais, purple, red, orange, yellow, green, blue, purple, pink, white, text, text6)


                    pygame.display.flip()
                    pos4 = False
                    pos1 = True
                    nombreEssais=nombreEssais+1
                    ligne = ligne-60
                    maListe = []
                elif pinkCircle.collidepoint(pos):
                    running = couleur(fenetre, ligne, maListe, codeSecret, nombreEssais, pink, red, orange, yellow, green, blue, purple, pink, white, text, text6)


                    pygame.display.flip()
                    pos4 = False
                    pos1 = True
                    nombreEssais=nombreEssais+1
                    ligne = ligne-60
                    maListe = []


                elif whiteCircle.collidepoint(pos):
                    running = couleur(fenetre, ligne, maListe, codeSecret, nombreEssais, white, red, orange, yellow, green, blue, purple, pink, white, text, text6)


                    pygame.display.flip()
                    pos4 = False
                    pos1 = True
                    nombreEssais=nombreEssais+1
                    ligne = ligne-60
                    maListe = []


        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                pygame.quit()
                return
    while True:
        for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    pygame.quit()
                    return




##################################################################################################################################################################################################################################################


#Fonction couleur qui est executée dans la fonction mode
def couleur(fenetre, ligne, maListe, codeSecret, nombreEssais, color, red, orange, yellow, green, blue, purple, pink, white, text, text6):    #On fait une liste d'arguments qui vont être utilisés dans d'autres fonctions plus tard
    pygame.draw.circle(fenetre, color, (636,ligne), 20, 0)  #Dessine un pion à l'emplacement 4 de la ligne ligne+x de la couleure mise en argument

    #Met un chiffre en dèrnière position de la liste maListe qui correspond à la couleure du pion placé en dèrnière position
    if color == red:
        maListe.append(1)
    if color == orange:
        maListe.append(2)
    if color == yellow:
        maListe.append(3)
    if color == green:
        maListe.append(4)
    if color == blue:
        maListe.append(5)
    if color == purple:
        maListe.append(6)
    if color == pink:
        maListe.append(7)
    if color == white:
        maListe.append(8)

    bonnePosition, bonneCouleur = sequence(maListe, codeSecret) #Associe les variables bonnePosition et bonneCouleur aux valeurs produites par la fonction sequence

    #Permet de placer les pions blancs et rouges pour vérifier si les pions placés sont bons ou pas
    if bonnePosition == 0 and bonneCouleur == 1:
        pygame.draw.circle(fenetre, white, (696, ligne-10), 5, 0)
    elif bonnePosition == 0 and bonneCouleur == 2:
        pygame.draw.circle(fenetre, white, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne-10), 5, 0)
    elif bonnePosition == 0 and bonneCouleur == 3:
        pygame.draw.circle(fenetre, white, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (696, ligne+10), 5, 0)
    elif bonnePosition == 0 and bonneCouleur == 4:
        pygame.draw.circle(fenetre, white, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (696, ligne+10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne+10), 5, 0)
    elif bonnePosition == 1 and bonneCouleur == 0:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
    elif bonnePosition == 1 and bonneCouleur == 1:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne-10), 5, 0)
    elif bonnePosition == 1 and bonneCouleur == 2:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (696, ligne+10), 5, 0)
    elif bonnePosition == 1 and bonneCouleur == 3:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (696, ligne+10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne+10), 5, 0)
    elif bonnePosition == 2 and bonneCouleur == 0:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, red, (716, ligne-10), 5, 0)
    elif bonnePosition == 2 and bonneCouleur == 1:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, red, (716, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (696, ligne+10), 5, 0)
    elif bonnePosition == 2 and bonneCouleur == 2:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, red, (716, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, white, (696, ligne+10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne+10), 5, 0)
    elif bonnePosition == 3 and bonneCouleur == 0:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, red, (716, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, red, (696, ligne+10), 5, 0)
    elif bonnePosition == 3 and bonneCouleur == 1:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, red, (716, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, red, (696, ligne+10), 5, 0)
        pygame.draw.circle(fenetre, white, (716, ligne+10), 5, 0)
    elif bonnePosition == 4 and bonneCouleur == 0:
        pygame.draw.circle(fenetre, red, (696, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, red, (716, ligne-10), 5, 0)
        pygame.draw.circle(fenetre, red, (696, ligne+10), 5, 0)
        pygame.draw.circle(fenetre, red, (716, ligne+10), 5, 0)

    #Si le bon code est entré alors ce programme est executé
    if maListe == codeSecret:
        fenetre.blit(text, (421, 8))    #.blit permet de placer le texte, l'image, etc à partir de la position (x, y) indiquée
        #Permet de dessiner le bon code à l'emplacement des points d'interogation une fois que le bon code est trouvé
        for loop in range (4):
            if maListe[loop] == 1:
                pygame.draw.circle(fenetre, red, (345+loop*97, 82), 20, 0)
            elif maListe[loop] == 2:
                pygame.draw.circle(fenetre, orange, (345+loop*97, 82), 20, 0)
            elif maListe[loop] == 3:
                pygame.draw.circle(fenetre, yellow, (345+loop*97, 82), 20, 0)
            elif maListe[loop] == 4:
                pygame.draw.circle(fenetre, green, (345+loop*97, 82), 20, 0)
            elif maListe[loop] == 5:
                pygame.draw.circle(fenetre, blue, (345+loop*97, 82), 20, 0)
            elif maListe[loop] == 6:
                pygame.draw.circle(fenetre, purple, (345+loop*97, 82), 20, 0)
            elif maListe[loop] == 7:
                pygame.draw.circle(fenetre, pink, (345+loop*97, 82), 20, 0)
            elif maListe[loop] == 8:
                pygame.draw.circle(fenetre, white, (345+loop*97, 82), 20, 0)
        return False

    #Si le bon code n'est pas trouvé au bout de 10 essais alors ce programme est executé
    elif nombreEssais == 9:
        fenetre.blit(text6, (421,8))
        for loop in range (4):
            if codeSecret[loop] == 1:
                pygame.draw.circle(fenetre, red, (345+loop*97, 82), 20, 0)
            elif codeSecret[loop] == 2:
                pygame.draw.circle(fenetre, orange, (345+loop*97, 82), 20, 0)
            elif codeSecret[loop] == 3:
                pygame.draw.circle(fenetre, yellow, (345+loop*97, 82), 20, 0)
            elif codeSecret[loop] == 4:
                pygame.draw.circle(fenetre, green, (345+loop*97, 82), 20, 0)
            elif codeSecret[loop] == 5:
                pygame.draw.circle(fenetre, blue, (345+loop*97, 82), 20, 0)
            elif codeSecret[loop] == 6:
                pygame.draw.circle(fenetre, purple, (345+loop*97, 82), 20, 0)
            elif codeSecret[loop] == 7:
                pygame.draw.circle(fenetre, pink, (345+loop*97, 82), 20, 0)
            elif codeSecret[loop] == 8:
                pygame.draw.circle(fenetre, white, (345+loop*97, 82), 20, 0)

        return False
    else:
        return True


##################################################################################################################################################################################################################################################

#Fonction qui sera executée dans la fonction couleur
def sequence(maListe, codeSecret):

    #Chaque couleure du code secret est associée à une variable pour faciliter les comparaisons
    A = codeSecret[0]
    B = codeSecret[1]
    C = codeSecret[2]
    D = codeSecret[3]

    #Pareil ici mais pour la liste du joueur
    W = maListe[0]
    X = maListe[1]
    Y = maListe[2]
    Z = maListe[3]
    bonnePosition = 0

    #Savoir combien de pions sont à la bonne position et de la bonne couleure
    if A == W:
    	bonnePosition = bonnePosition+1  #On compare les 2 listes pour savoir si il y a 2 couleurs à la même position

    if B == X:
    	bonnePosition = bonnePosition+1

    if C == Y:
    	bonnePosition = bonnePosition+1

    if D == Z:
    	bonnePosition = bonnePosition+1


    #Savoir combien de pions sont de la bonne couleure mais dans la mauvaise position
    bonneCouleur = 0
    if A == X:
    	bonneCouleur = bonneCouleur+1    #On compare les couleures des 2 listes. Si on toruve une des couleur d'une liste dans l'autre alors rajouter 1 à la variable bonneCouleur

    if A == Y:
    	bonneCouleur = bonneCouleur+1

    if A == Z:
    	bonneCouleur = bonneCouleur+1

    if B == W:
    	bonneCouleur = bonneCouleur+1

    if B == Y:
    	bonneCouleur = bonneCouleur+1

    if B == Z:
    	bonneCouleur = bonneCouleur+1

    if C == W:
    	bonneCouleur = bonneCouleur+1

    if C == X:
    	bonneCouleur = bonneCouleur+1

    if C == Z:
    	bonneCouleur = bonneCouleur+1

    if D == W:
    	bonneCouleur = bonneCouleur+1

    if D == X:
    	bonneCouleur = bonneCouleur+1

    if D == Y:
    	bonneCouleur = bonneCouleur+1



    return bonnePosition, bonneCouleur  #Les valeurs trouvées pour les positions sont relevées



main()

